---
export const prerender = false;

import { db, inArray, Story } from "astro:db";
import "../styles/global.css";

type ApiStory = {
  id: number;
  time: number;
  url: string;
  title: string;
};

console.log("Fetching story IDs");
const storyListRequest = await fetch(
  "https://hacker-news.firebaseio.com/v0/topstories.json",
);
const storyIDs: number[] = (await storyListRequest.json()).slice(0, 20);

// Find stories that are already in the database
const stories = await db
  .select()
  .from(Story)
  .where(inArray(Story.id, storyIDs));
const requestIDs = storyIDs.filter((id) => !stories.find((s) => s.id === id));

// If there are new stories, fetch them, add them to stories array and db
if (requestIDs.length) {
  const requests = requestIDs.map((id) =>
    fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`).then(
      (response) => response.json(),
    ),
  );
  const apiStories = await Promise.all(requests);
  stories.push(...apiStories);

  console.log(`Adding ${apiStories.length} stories to DB`);
  await db.insert(Story).values(apiStories).onConflictDoNothing();
}

// Sort by the current topstories.json order, which might be different
// from the db order.
stories.sort((a, b) => storyIDs.indexOf(a.id) - storyIDs.indexOf(b.id));
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Hacker News story fetcher</title>
  </head>
  <body>
    <h1>Hacker News stories</h1>
    <table>
      {
        stories.map((story: ApiStory) => (
          <tr>
            <td>{new Date(story.time * 1000).toLocaleString()}</td>
            <td>
              <a href={story.url} target="_new">
                {story.title}
              </a>
              <br />
              {new URL(story.url).hostname}
            </td>
          </tr>
        ))
      }
    </table>
  </body>
</html>
